from itertools import count, cycle
from functools import reduce
from math import factorial

# Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в
# нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений
# необходимо запускать скрипт с параметрами.


try:
    def cash():
        t = int(input('Выработка в часах - '))
        mph = int(input('Ставка в час - '))
        p = int(input('Премия - '))
        res = (t * mph) + p
        print(res)
        return res

except ValueError:
    print('Not a number')

cash()

# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.

ls = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
nw_ls = [el for num, el in zip(ls, ls[1:]) if el > num]
print(ls)
print(nw_ls)

# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.

krat = [el for el in range(20, 240) if el % 30 == 0 or el % 31 == 0]

print(krat)

# Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор.

orig = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
only = [el for el in orig if orig.count(el) == 1]

print(orig)
print(only)


# Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
# числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.


def my_func(el_p, el):
    return el_p * el


print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')

# Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его
# завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем
# цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.


stop = 0
for el in count(int(input('Введите стартовое число '))):
    if stop > 10:
        break
    else:
        print(el)
    stop += 1

my_list = [True, 'ABC', 123, None]
for el in cycle(my_list):
    print(el)  # бесконечность не предел!


# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
# должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за
# получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.


def fibo_gen():
    for el in count(1):
        yield factorial(el)


gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break
